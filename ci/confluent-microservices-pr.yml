---
resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

resources:
- name: rate-src
  type: pull-request
  source:
    repository: ((github.repository))
    access_token: ((github.access-token))
    paths: 
    - currency-rate
    - integration-tests/currency-rate-it

- name: transaction-src
  type: pull-request
  source:
    repository: ((github.repository))
    access_token: ((github.access-token))
    paths: 
    - transaction

- name: wallet-src
  type: pull-request
  source:
    repository: ((github.repository))
    access_token: ((github.access-token))
    paths: 
    - wallet

- name: ui-src
  type: pull-request
  source:
    repository: ((github.repository))
    access_token: ((github.access-token))
    paths: 
    - ui

- name: src-ci
  type: git
  source:
    uri: ((github.uri))
    branch: master
    private_key: ((github.private-key))

- name: docker-image-rate
  type: docker-image
  source:
    repository: ((docker.registry.repository-rate))
    username: ((docker.registry.username))
    password: ((docker.registry.password))

- name: docker-image-transaction
  type: docker-image
  source:
    repository: ((docker.registry.repository-transaction))
    username: ((docker.registry.username))
    password: ((docker.registry.password))

- name: docker-image-wallet
  type: docker-image
  source:
    repository: ((docker.registry.repository-wallet))
    username: ((docker.registry.username))
    password: ((docker.registry.password))

- name: docker-image-ui
  type: docker-image
  source:
    repository: ((docker.registry.repository-ui))
    username: ((docker.registry.username))
    password: ((docker.registry.password))

- name: rate-version
  type: s3
  source:
    bucket: ((s3.bucket))
    versioned_file: versions/rate-version
    access_key_id: ((s3.access-key-id))
    secret_access_key: ((s3.secret-access-key))
    region_name: ((s3.region-name))

- name: transaction-version
  type: s3
  source:
    bucket: ((s3.bucket))
    versioned_file: versions/transaction-version
    access_key_id: ((s3.access-key-id))
    secret_access_key: ((s3.secret-access-key))
    region_name: ((s3.region-name))

- name: wallet-version
  type: s3
  source:
    bucket: ((s3.bucket))
    versioned_file: versions/wallet-version
    access_key_id: ((s3.access-key-id))
    secret_access_key: ((s3.secret-access-key))
    region_name: ((s3.region-name))

- name: ui-version
  type: s3
  source:
    bucket: ((s3.bucket))
    versioned_file: versions/ui-version
    access_key_id: ((s3.access-key-id))
    secret_access_key: ((s3.secret-access-key))
    region_name: ((s3.region-name))

jobs:

- name: Build Rate Service
  plan:
  - get: rate-src
    trigger: true
    version: every
  - put: rate-src
    params:
      path: rate-src
      status: PENDING
  - get: src-ci
  - task: "Build rate with Maven"
    file: src-ci/ci/tasks/maven/maven-package.yml
    input_mapping:
      src: rate-src
      src-ci: src-ci
    params:
      BUILD_PATH: currency-rate
  - put: docker-image-rate
    params:
      build: build
  - put: rate-version
    params:
      file: docker-image-rate/digest
  on_failure:
    put: rate-src
    params:
      path: rate-src
      status: FAILURE

- name: Rate Service Integration Tests
  plan:
  - get: rate-src
    passed: ["Build Rate Service"]
  - get: rate-version
    passed: ["Build Rate Service"]
  - get: transaction-version
    passed: ["Build Transaction Service"]
  - get: wallet-version
    passed: ["Build Wallet Service"]
  - get: ui-version
    passed: ["Build UI Service"]
  - get: src-ci
  - get: docker-image-rate
    passed: ["Build Rate Service"]
    trigger: true
  - task: Docker Compose Deployment
    file: src-ci/ci/tasks/deploy/deploy.yml
    input_mapping:
      ci: src-ci
    params:
      DEPLOYMENT_NAME: rate-it
      DOCKER_SERVER: ((docker.server))
      DOCKER_SSH_USER: ((docker.ssh-user))
      DOCKER_SSH_PRIVATE_KEY: ((docker.ssh-private-key))
      DOCKER_COMPOSE_FILE: ci/ci/docker-compose/integration-tests/rate-it/docker-compose.yml
      REGISTRY_URL: ((docker.registry.url))
      REGISTRY_USERNAME: ((docker.registry.username))
      REGISTRY_PASSWORD: ((docker.registry.password))
      KAFKA_PORT: 11000
  - task: "Run rate Integration Tests with Maven"
    file: src-ci/ci/tasks/maven/maven-test.yml
    input_mapping:
      src: rate-src
    params:
      BUILD_PATH: integration-tests/currency-rate-it
      ENVIRONMENT_FILE: src-ci/ci/env-vars/integration-tests/rate-it
  - put: rate-src
    params:
      path: rate-src
      status: SUCCESS
  on_failure:
    put: rate-src
    params:
      path: rate-src
      status: FAILURE

- name: Build Transaction Service
  plan:
  - get: transaction-src
    trigger: true
    version: every
  - put: transaction-src
    params:
      path: transaction-src
      status: PENDING
  - get: src-ci
  - task: "Build transaction with Golang"
    file: src-ci/ci/tasks/kafka-go-build/kafka-go-build.yml
    input_mapping:
      src: transaction-src
      src-ci: src-ci
    params:
      BUILD_PATH: transaction
  - put: docker-image-transaction
    params:
      build: build
  - put: transaction-version
    params:
      file: docker-image-transaction/digest
  on_failure:
    put: transaction-src
    params:
      path: rate-src
      status: FAILURE

- name: Transaction Service Integration Tests
  plan:
  - get: src-ci
  - get: rate-version
    passed: ["Build Rate Service"]
  - get: transaction-version
    passed: ["Build Transaction Service"]
  - get: wallet-version
    passed: ["Build Wallet Service"]
  - get: ui-version
    passed: ["Build UI Service"]
  - get: transaction-src
    passed: ["Build Transaction Service"]
  - get: docker-image-transaction
    passed: ["Build Transaction Service"]
    trigger: true
  - task: Docker Compose Deployment
    file: src-ci/ci/tasks/deploy/deploy.yml
    input_mapping:
      ci: src-ci
    params:
      DEPLOYMENT_NAME: transaction-it
      DOCKER_SERVER: ((docker.server))
      DOCKER_SSH_USER: ((docker.ssh-user))
      DOCKER_SSH_PRIVATE_KEY: ((docker.ssh-private-key))
      DOCKER_COMPOSE_FILE: ci/ci/docker-compose/integration-tests/rate-it/docker-compose.yml
      REGISTRY_URL: ((docker.registry.url))
      REGISTRY_USERNAME: ((docker.registry.username))
      REGISTRY_PASSWORD: ((docker.registry.password))
      KAFKA_PORT: 12000
  - task: "Run transaction Integration Tests with Maven"
    file: src-ci/ci/tasks/maven/maven-test.yml
    input_mapping:
      src: rate-src
    params:
      BUILD_PATH: integration-tests/transaction-it
      ENVIRONMENT_FILE: src-ci/ci/env-vars/integration-tests/transaction-it
  - put: transaction-src
    params:
      path: transaction-src
      status: SUCCESS
  on_failure:
    put: transaction-src
    params:
      path: rate-src
      status: FAILURE

- name: Build Wallet Service
  plan:
  - get: wallet-src
    trigger: true
    version: every
  - put: wallet-src
    params:
      path: wallet-src
      status: PENDING
  - get: src-ci
  - put: docker-image-wallet
    params:
      build: wallet-src/wallet
  - put: wallet-version
    params:
      file: docker-image-wallet/digest
  on_failure:
    put: wallet-src
    params:
      path: wallet-src
      status: FAILURE

- name: Wallet Service Integration Tests
  plan:
  - get: src-ci
  - get: rate-version
    passed: ["Build Rate Service"]
  - get: transaction-version
    passed: ["Build Transaction Service"]
  - get: wallet-version
    passed: ["Build Wallet Service"]
  - get: ui-version
    passed: ["Build UI Service"]
  - get: wallet-src
    passed: ["Build Wallet Service"]
  - get: docker-image-wallet
    passed: ["Build Wallet Service"]
    trigger: true
  - task: Docker Compose Deployment
    file: src-ci/ci/tasks/deploy/deploy.yml
    input_mapping:
      ci: src-ci
    params:
      DEPLOYMENT_NAME: wallet-it
      DOCKER_SERVER: ((docker.server))
      DOCKER_SSH_USER: ((docker.ssh-user))
      DOCKER_SSH_PRIVATE_KEY: ((docker.ssh-private-key))
      DOCKER_COMPOSE_FILE: ci/ci/docker-compose/integration-tests/wallet-it/docker-compose.yml
      REGISTRY_URL: ((docker.registry.url))
      REGISTRY_USERNAME: ((docker.registry.username))
      REGISTRY_PASSWORD: ((docker.registry.password))
  - task: "Run transaction Integration Tests with Maven"
    file: src-ci/ci/tasks/maven/maven-test.yml
    input_mapping:
      src: rate-src
    params:
      BUILD_PATH: integration-tests/wallet-it
      ENVIRONMENT_FILE: src-ci/ci/env-vars/integration-tests/wallet-it
  - put: wallet-src
    params:
      path: wallet-src
      status: SUCCESS
  on_failure:
    put: wallet-src
    params:
      path: wallet-src
      status: FAILURE

- name: Build UI Service
  plan:
  - get: ui-src
    trigger: true
    version: every
  - get: src-ci
  - task: "Build UI Service with Maven and NPM"
    file: src-ci/ci/tasks/maven/maven-package.yml
    input_mapping:
      src: ui-src
      src-ci: src-ci
    params:
      BUILD_PATH: ui
  - put: docker-image-ui
    params:
      build: build
  - put: ui-version
    params:
      file: docker-image-ui/version

- name: Deploy PR Environment with Docker Compose
  plan:
  - get: src-ci
  - get: rate-version
    passed: ["Rate Service Integration Tests"]
  - get: transaction-version
    passed: ["Transaction Service Integration Tests"]
  - get: wallet-version
    passed: ["Wallet Service Integration Tests"]
  - get: ui-version
    passed: ["Build UI Service"]
  - get: docker-image-wallet
    passed: ["Wallet Service Integration Tests"]
    trigger: true
  - get: docker-image-transaction
    passed: ["Transaction Service Integration Tests"]
    trigger: true
  - get: docker-image-rate
    passed: ["Rate Service Integration Tests"]
    trigger: true
  - get: docker-image-ui
    passed: ["Build UI Service"]
    trigger: true

- name: Run Acceptance Tests
  plan:
  - get: src-ci
  - get: rate-version
    passed: ["Deploy PR Environment with Docker Compose"]
  - get: transaction-version
    passed: ["Deploy PR Environment with Docker Compose"]
  - get: wallet-version
    passed: ["Deploy PR Environment with Docker Compose"]
  - get: ui-version
    passed: ["Deploy PR Environment with Docker Compose"]
  - get: docker-image-wallet
    passed: ["Deploy PR Environment with Docker Compose"]
    trigger: true
  - get: docker-image-transaction
    passed: ["Deploy PR Environment with Docker Compose"]
    trigger: true
  - get: docker-image-rate
    passed: ["Deploy PR Environment with Docker Compose"]
    trigger: true
  - get: docker-image-ui
    passed: ["Deploy PR Environment with Docker Compose"]
    trigger: true